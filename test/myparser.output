

Terminals which are not used:

   DEFINE
   STRUCT
   EOR_ID
   SINGLE_QUOTE
   DOUBLE_QUOTE
   UNDEFINED


Conflict in state 114 between rule 50 and token ELSE resolved as shift.

Grammar
rule 1    Type_Specifier -> VOID
rule 2    Type_Specifier -> INT
rule 3    primary_expression -> ID
rule 4    primary_expression -> DIGIT
rule 5    primary_expression -> LP additive_expression RP
rule 6    function_definition -> Type_Specifier MAIN LP RP compound_statement
rule 7    statement -> compound_statement
rule 8    statement -> expression_statement
rule 9    statement -> selection_statement
rule 10   statement -> iteration_statement
rule 11   statement -> write_Statement
rule 12   statement -> input_Statement
rule 13   compound_statement -> LBRACE RBRACE
rule 14   compound_statement -> LBRACE block_item_list RBRACE
rule 15   block_item_list -> block_item
rule 16   block_item_list -> block_item_list block_item
rule 17   block_item -> declaration
rule 18   block_item -> statement
rule 19   declaration -> Type_Specifier init_declarator_list SEMICOLON
rule 20   init_declarator_list -> init_declarator
rule 21   init_declarator_list -> init_declarator_list COMIC init_declarator
rule 22   init_declarator -> ID
rule 23   init_declarator -> ID ASSIGN additive_expression
rule 24   expression_statement -> SEMICOLON
rule 25   expression_statement -> expression SEMICOLON
rule 26   expression -> logic_or_expression
rule 27   expression -> ID ASSIGN additive_expression
rule 28   expression -> self_operate_expression
rule 29   self_operate_expression -> ID PLUS PLUS
rule 30   self_operate_expression -> ID MINUS MINUS
rule 31   self_operate_expression -> PLUS PLUS ID
rule 32   self_operate_expression -> MINUS MINUS ID
rule 33   additive_expression -> mutiply_expression
rule 34   additive_expression -> additive_expression PLUS mutiply_expression
rule 35   additive_expression -> additive_expression MINUS mutiply_expression
rule 36   mutiply_expression -> power_expression
rule 37   mutiply_expression -> mutiply_expression MULTIPLY power_expression
rule 38   mutiply_expression -> mutiply_expression DIVIDE power_expression
rule 39   mutiply_expression -> mutiply_expression MOD power_expression
rule 40   power_expression -> primary_expression POW primary_expression
rule 41   power_expression -> primary_expression
rule 42   Logic_assign_expression -> primary_expression
rule 43   Logic_assign_expression -> primary_expression LP_Symbol primary_expression
rule 44   logic_and_expression -> login_not_expression
rule 45   logic_and_expression -> logic_and_expression AND login_not_expression
rule 46   logic_or_expression -> logic_and_expression
rule 47   logic_or_expression -> logic_or_expression OR logic_and_expression
rule 48   login_not_expression -> Logic_assign_expression
rule 49   login_not_expression -> NOT Logic_assign_expression
rule 50   selection_statement -> IF LP expression RP statement
rule 51   selection_statement -> IF LP expression RP statement ELSE statement
rule 52   iteration_statement -> WHILE LP expression RP statement
rule 53   iteration_statement -> FOR LP expression_statement expression_statement RP statement
rule 54   iteration_statement -> FOR LP expression_statement expression_statement expression RP statement
rule 55   iteration_statement -> FOR LP declaration expression_statement RP statement
rule 56   iteration_statement -> FOR LP declaration expression_statement expression RP statement
rule 57   LP_Symbol -> LT
rule 58   LP_Symbol -> LTandL_E
rule 59   LP_Symbol -> L_E
rule 60   LP_Symbol -> GT
rule 61   LP_Symbol -> GTandL_E
rule 62   LP_Symbol -> LNOT
rule 63   write_Statement -> OUTPUT LP primary_expression RP SEMICOLON
rule 64   input_Statement -> INPUT LP ID RP

Terminals, with rules where they appear

$ (-1)
error (256)
VOID (257) 1
INT (258) 2
MAIN (259) 6
WHILE (260) 52
FOR (261) 53 54 55 56
IF (262) 50 51
ELSE (263) 51
SEMICOLON (264) 19 24 25 63
ASSIGN (265) 23 27
DEFINE (266)
STRUCT (267)
INPUT (268) 64
OUTPUT (269) 63
ID (270) 3 22 23 27 29 30 31 32 64
DIGIT (271) 4
EOR_ID (272)
PLUS (273) 29 31 34
MINUS (274) 30 32 35
MULTIPLY (275) 37
DIVIDE (276) 38
MOD (277) 39
POW (278) 40
L_E (279) 59
GT (280) 60
LT (281) 57
GTandL_E (282) 61
LTandL_E (283) 58
LNOT (284) 62
NOT (285) 49
AND (286) 45
OR (287) 47
LP (288) 5 6 50 51 52 53 54 55 56 63 64
RP (289) 5 6 50 51 52 53 54 55 56 63 64
SINGLE_QUOTE (290)
DOUBLE_QUOTE (291)
LBRACE (292) 13 14
RBRACE (293) 13 14
COMIC (294) 21
UNDEFINED (295)

Nonterminals, with rules where they appear

Type_Specifier (42)
    on left: 1 2, on right: 6 19
primary_expression (43)
    on left: 3 4 5, on right: 40 41 42 43 63
function_definition (44)
    on left: 6
statement (45)
    on left: 7 8 9 10 11 12, on right: 18 50 51 52 53 54 55 56
compound_statement (46)
    on left: 13 14, on right: 6 7
block_item_list (47)
    on left: 15 16, on right: 14 16
block_item (48)
    on left: 17 18, on right: 15 16
declaration (49)
    on left: 19, on right: 17 55 56
init_declarator_list (50)
    on left: 20 21, on right: 19 21
init_declarator (51)
    on left: 22 23, on right: 20 21
expression_statement (52)
    on left: 24 25, on right: 8 53 54 55 56
expression (53)
    on left: 26 27 28, on right: 25 50 51 52 54 56
self_operate_expression (54)
    on left: 29 30 31 32, on right: 28
additive_expression (55)
    on left: 33 34 35, on right: 5 23 27 34 35
mutiply_expression (56)
    on left: 36 37 38 39, on right: 33 34 35 37 38 39
power_expression (57)
    on left: 40 41, on right: 36 37 38 39
Logic_assign_expression (58)
    on left: 42 43, on right: 48 49
logic_and_expression (59)
    on left: 44 45, on right: 45 46 47
logic_or_expression (60)
    on left: 46 47, on right: 26 47
login_not_expression (61)
    on left: 48 49, on right: 44 45
selection_statement (62)
    on left: 50 51, on right: 9
iteration_statement (63)
    on left: 52 53 54 55 56, on right: 10
LP_Symbol (64)
    on left: 57 58 59 60 61 62, on right: 43
write_Statement (65)
    on left: 63, on right: 11
input_Statement (66)
    on left: 64, on right: 12


state 0

    VOID	shift, and go to state 1
    INT 	shift, and go to state 2

    Type_Specifier	go to state 3
    function_definition	go to state 124



state 1

    Type_Specifier  ->  VOID .   (rule 1)

    $default	reduce using rule 1 (Type_Specifier)



state 2

    Type_Specifier  ->  INT .   (rule 2)

    $default	reduce using rule 2 (Type_Specifier)



state 3

    function_definition  ->  Type_Specifier . MAIN LP RP compound_statement   (rule 6)

    MAIN	shift, and go to state 4



state 4

    function_definition  ->  Type_Specifier MAIN . LP RP compound_statement   (rule 6)

    LP  	shift, and go to state 5



state 5

    function_definition  ->  Type_Specifier MAIN LP . RP compound_statement   (rule 6)

    RP  	shift, and go to state 6



state 6

    function_definition  ->  Type_Specifier MAIN LP RP . compound_statement   (rule 6)

    LBRACE	shift, and go to state 7

    compound_statement	go to state 8



state 7

    compound_statement  ->  LBRACE . RBRACE   (rule 13)
    compound_statement  ->  LBRACE . block_item_list RBRACE   (rule 14)

    VOID	shift, and go to state 1
    INT 	shift, and go to state 2
    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7
    RBRACE	shift, and go to state 21

    Type_Specifier	go to state 22
    primary_expression	go to state 23
    statement	go to state 24
    compound_statement	go to state 25
    block_item_list	go to state 26
    block_item	go to state 27
    declaration	go to state 28
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 8

    function_definition  ->  Type_Specifier MAIN LP RP compound_statement .   (rule 6)

    $default	reduce using rule 6 (function_definition)



state 9

    iteration_statement  ->  WHILE . LP expression RP statement   (rule 52)

    LP  	shift, and go to state 40



state 10

    iteration_statement  ->  FOR . LP expression_statement expression_statement RP statement   (rule 53)
    iteration_statement  ->  FOR . LP expression_statement expression_statement expression RP statement   (rule 54)
    iteration_statement  ->  FOR . LP declaration expression_statement RP statement   (rule 55)
    iteration_statement  ->  FOR . LP declaration expression_statement expression RP statement   (rule 56)

    LP  	shift, and go to state 41



state 11

    selection_statement  ->  IF . LP expression RP statement   (rule 50)
    selection_statement  ->  IF . LP expression RP statement ELSE statement   (rule 51)

    LP  	shift, and go to state 42



state 12

    expression_statement  ->  SEMICOLON .   (rule 24)

    $default	reduce using rule 24 (expression_statement)



state 13

    input_Statement  ->  INPUT . LP ID RP   (rule 64)

    LP  	shift, and go to state 43



state 14

    write_Statement  ->  OUTPUT . LP primary_expression RP SEMICOLON   (rule 63)

    LP  	shift, and go to state 44



state 15

    primary_expression  ->  ID .   (rule 3)
    expression  ->  ID . ASSIGN additive_expression   (rule 27)
    self_operate_expression  ->  ID . PLUS PLUS   (rule 29)
    self_operate_expression  ->  ID . MINUS MINUS   (rule 30)

    ASSIGN	shift, and go to state 45
    PLUS	shift, and go to state 46
    MINUS	shift, and go to state 47

    $default	reduce using rule 3 (primary_expression)



state 16

    primary_expression  ->  DIGIT .   (rule 4)

    $default	reduce using rule 4 (primary_expression)



state 17

    self_operate_expression  ->  PLUS . PLUS ID   (rule 31)

    PLUS	shift, and go to state 48



state 18

    self_operate_expression  ->  MINUS . MINUS ID   (rule 32)

    MINUS	shift, and go to state 49



state 19

    login_not_expression  ->  NOT . Logic_assign_expression   (rule 49)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 23
    Logic_assign_expression	go to state 51



state 20

    primary_expression  ->  LP . additive_expression RP   (rule 5)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    additive_expression	go to state 53
    mutiply_expression	go to state 54
    power_expression	go to state 55



state 21

    compound_statement  ->  LBRACE RBRACE .   (rule 13)

    $default	reduce using rule 13 (compound_statement)



state 22

    declaration  ->  Type_Specifier . init_declarator_list SEMICOLON   (rule 19)

    ID  	shift, and go to state 56

    init_declarator_list	go to state 57
    init_declarator	go to state 58



state 23

    Logic_assign_expression  ->  primary_expression .   (rule 42)
    Logic_assign_expression  ->  primary_expression . LP_Symbol primary_expression   (rule 43)

    L_E 	shift, and go to state 59
    GT  	shift, and go to state 60
    LT  	shift, and go to state 61
    GTandL_E	shift, and go to state 62
    LTandL_E	shift, and go to state 63
    LNOT	shift, and go to state 64

    $default	reduce using rule 42 (Logic_assign_expression)

    LP_Symbol	go to state 65



state 24

    block_item  ->  statement .   (rule 18)

    $default	reduce using rule 18 (block_item)



state 25

    statement  ->  compound_statement .   (rule 7)

    $default	reduce using rule 7 (statement)



state 26

    compound_statement  ->  LBRACE block_item_list . RBRACE   (rule 14)
    block_item_list  ->  block_item_list . block_item   (rule 16)

    VOID	shift, and go to state 1
    INT 	shift, and go to state 2
    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7
    RBRACE	shift, and go to state 66

    Type_Specifier	go to state 22
    primary_expression	go to state 23
    statement	go to state 24
    compound_statement	go to state 25
    block_item	go to state 67
    declaration	go to state 28
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 27

    block_item_list  ->  block_item .   (rule 15)

    $default	reduce using rule 15 (block_item_list)



state 28

    block_item  ->  declaration .   (rule 17)

    $default	reduce using rule 17 (block_item)



state 29

    statement  ->  expression_statement .   (rule 8)

    $default	reduce using rule 8 (statement)



state 30

    expression_statement  ->  expression . SEMICOLON   (rule 25)

    SEMICOLON	shift, and go to state 68



state 31

    expression  ->  self_operate_expression .   (rule 28)

    $default	reduce using rule 28 (expression)



state 32

    login_not_expression  ->  Logic_assign_expression .   (rule 48)

    $default	reduce using rule 48 (login_not_expression)



state 33

    logic_and_expression  ->  logic_and_expression . AND login_not_expression   (rule 45)
    logic_or_expression  ->  logic_and_expression .   (rule 46)

    AND 	shift, and go to state 69

    $default	reduce using rule 46 (logic_or_expression)



state 34

    expression  ->  logic_or_expression .   (rule 26)
    logic_or_expression  ->  logic_or_expression . OR logic_and_expression   (rule 47)

    OR  	shift, and go to state 70

    $default	reduce using rule 26 (expression)



state 35

    logic_and_expression  ->  login_not_expression .   (rule 44)

    $default	reduce using rule 44 (logic_and_expression)



state 36

    statement  ->  selection_statement .   (rule 9)

    $default	reduce using rule 9 (statement)



state 37

    statement  ->  iteration_statement .   (rule 10)

    $default	reduce using rule 10 (statement)



state 38

    statement  ->  write_Statement .   (rule 11)

    $default	reduce using rule 11 (statement)



state 39

    statement  ->  input_Statement .   (rule 12)

    $default	reduce using rule 12 (statement)



state 40

    iteration_statement  ->  WHILE LP . expression RP statement   (rule 52)

    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20

    primary_expression	go to state 23
    expression	go to state 71
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35



state 41

    iteration_statement  ->  FOR LP . expression_statement expression_statement RP statement   (rule 53)
    iteration_statement  ->  FOR LP . expression_statement expression_statement expression RP statement   (rule 54)
    iteration_statement  ->  FOR LP . declaration expression_statement RP statement   (rule 55)
    iteration_statement  ->  FOR LP . declaration expression_statement expression RP statement   (rule 56)

    VOID	shift, and go to state 1
    INT 	shift, and go to state 2
    SEMICOLON	shift, and go to state 12
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20

    Type_Specifier	go to state 22
    primary_expression	go to state 23
    declaration	go to state 72
    expression_statement	go to state 73
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35



state 42

    selection_statement  ->  IF LP . expression RP statement   (rule 50)
    selection_statement  ->  IF LP . expression RP statement ELSE statement   (rule 51)

    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20

    primary_expression	go to state 23
    expression	go to state 74
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35



state 43

    input_Statement  ->  INPUT LP . ID RP   (rule 64)

    ID  	shift, and go to state 75



state 44

    write_Statement  ->  OUTPUT LP . primary_expression RP SEMICOLON   (rule 63)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 76



state 45

    expression  ->  ID ASSIGN . additive_expression   (rule 27)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    additive_expression	go to state 77
    mutiply_expression	go to state 54
    power_expression	go to state 55



state 46

    self_operate_expression  ->  ID PLUS . PLUS   (rule 29)

    PLUS	shift, and go to state 78



state 47

    self_operate_expression  ->  ID MINUS . MINUS   (rule 30)

    MINUS	shift, and go to state 79



state 48

    self_operate_expression  ->  PLUS PLUS . ID   (rule 31)

    ID  	shift, and go to state 80



state 49

    self_operate_expression  ->  MINUS MINUS . ID   (rule 32)

    ID  	shift, and go to state 81



state 50

    primary_expression  ->  ID .   (rule 3)

    $default	reduce using rule 3 (primary_expression)



state 51

    login_not_expression  ->  NOT Logic_assign_expression .   (rule 49)

    $default	reduce using rule 49 (login_not_expression)



state 52

    power_expression  ->  primary_expression . POW primary_expression   (rule 40)
    power_expression  ->  primary_expression .   (rule 41)

    POW 	shift, and go to state 82

    $default	reduce using rule 41 (power_expression)



state 53

    primary_expression  ->  LP additive_expression . RP   (rule 5)
    additive_expression  ->  additive_expression . PLUS mutiply_expression   (rule 34)
    additive_expression  ->  additive_expression . MINUS mutiply_expression   (rule 35)

    PLUS	shift, and go to state 83
    MINUS	shift, and go to state 84
    RP  	shift, and go to state 85



state 54

    additive_expression  ->  mutiply_expression .   (rule 33)
    mutiply_expression  ->  mutiply_expression . MULTIPLY power_expression   (rule 37)
    mutiply_expression  ->  mutiply_expression . DIVIDE power_expression   (rule 38)
    mutiply_expression  ->  mutiply_expression . MOD power_expression   (rule 39)

    MULTIPLY	shift, and go to state 86
    DIVIDE	shift, and go to state 87
    MOD 	shift, and go to state 88

    $default	reduce using rule 33 (additive_expression)



state 55

    mutiply_expression  ->  power_expression .   (rule 36)

    $default	reduce using rule 36 (mutiply_expression)



state 56

    init_declarator  ->  ID .   (rule 22)
    init_declarator  ->  ID . ASSIGN additive_expression   (rule 23)

    ASSIGN	shift, and go to state 89

    $default	reduce using rule 22 (init_declarator)



state 57

    declaration  ->  Type_Specifier init_declarator_list . SEMICOLON   (rule 19)
    init_declarator_list  ->  init_declarator_list . COMIC init_declarator   (rule 21)

    SEMICOLON	shift, and go to state 90
    COMIC	shift, and go to state 91



state 58

    init_declarator_list  ->  init_declarator .   (rule 20)

    $default	reduce using rule 20 (init_declarator_list)



state 59

    LP_Symbol  ->  L_E .   (rule 59)

    $default	reduce using rule 59 (LP_Symbol)



state 60

    LP_Symbol  ->  GT .   (rule 60)

    $default	reduce using rule 60 (LP_Symbol)



state 61

    LP_Symbol  ->  LT .   (rule 57)

    $default	reduce using rule 57 (LP_Symbol)



state 62

    LP_Symbol  ->  GTandL_E .   (rule 61)

    $default	reduce using rule 61 (LP_Symbol)



state 63

    LP_Symbol  ->  LTandL_E .   (rule 58)

    $default	reduce using rule 58 (LP_Symbol)



state 64

    LP_Symbol  ->  LNOT .   (rule 62)

    $default	reduce using rule 62 (LP_Symbol)



state 65

    Logic_assign_expression  ->  primary_expression LP_Symbol . primary_expression   (rule 43)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 92



state 66

    compound_statement  ->  LBRACE block_item_list RBRACE .   (rule 14)

    $default	reduce using rule 14 (compound_statement)



state 67

    block_item_list  ->  block_item_list block_item .   (rule 16)

    $default	reduce using rule 16 (block_item_list)



state 68

    expression_statement  ->  expression SEMICOLON .   (rule 25)

    $default	reduce using rule 25 (expression_statement)



state 69

    logic_and_expression  ->  logic_and_expression AND . login_not_expression   (rule 45)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20

    primary_expression	go to state 23
    Logic_assign_expression	go to state 32
    login_not_expression	go to state 93



state 70

    logic_or_expression  ->  logic_or_expression OR . logic_and_expression   (rule 47)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20

    primary_expression	go to state 23
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 94
    login_not_expression	go to state 35



state 71

    iteration_statement  ->  WHILE LP expression . RP statement   (rule 52)

    RP  	shift, and go to state 95



state 72

    iteration_statement  ->  FOR LP declaration . expression_statement RP statement   (rule 55)
    iteration_statement  ->  FOR LP declaration . expression_statement expression RP statement   (rule 56)

    SEMICOLON	shift, and go to state 12
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20

    primary_expression	go to state 23
    expression_statement	go to state 96
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35



state 73

    iteration_statement  ->  FOR LP expression_statement . expression_statement RP statement   (rule 53)
    iteration_statement  ->  FOR LP expression_statement . expression_statement expression RP statement   (rule 54)

    SEMICOLON	shift, and go to state 12
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20

    primary_expression	go to state 23
    expression_statement	go to state 97
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35



state 74

    selection_statement  ->  IF LP expression . RP statement   (rule 50)
    selection_statement  ->  IF LP expression . RP statement ELSE statement   (rule 51)

    RP  	shift, and go to state 98



state 75

    input_Statement  ->  INPUT LP ID . RP   (rule 64)

    RP  	shift, and go to state 99



state 76

    write_Statement  ->  OUTPUT LP primary_expression . RP SEMICOLON   (rule 63)

    RP  	shift, and go to state 100



state 77

    expression  ->  ID ASSIGN additive_expression .   (rule 27)
    additive_expression  ->  additive_expression . PLUS mutiply_expression   (rule 34)
    additive_expression  ->  additive_expression . MINUS mutiply_expression   (rule 35)

    PLUS	shift, and go to state 83
    MINUS	shift, and go to state 84

    $default	reduce using rule 27 (expression)



state 78

    self_operate_expression  ->  ID PLUS PLUS .   (rule 29)

    $default	reduce using rule 29 (self_operate_expression)



state 79

    self_operate_expression  ->  ID MINUS MINUS .   (rule 30)

    $default	reduce using rule 30 (self_operate_expression)



state 80

    self_operate_expression  ->  PLUS PLUS ID .   (rule 31)

    $default	reduce using rule 31 (self_operate_expression)



state 81

    self_operate_expression  ->  MINUS MINUS ID .   (rule 32)

    $default	reduce using rule 32 (self_operate_expression)



state 82

    power_expression  ->  primary_expression POW . primary_expression   (rule 40)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 101



state 83

    additive_expression  ->  additive_expression PLUS . mutiply_expression   (rule 34)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    mutiply_expression	go to state 102
    power_expression	go to state 55



state 84

    additive_expression  ->  additive_expression MINUS . mutiply_expression   (rule 35)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    mutiply_expression	go to state 103
    power_expression	go to state 55



state 85

    primary_expression  ->  LP additive_expression RP .   (rule 5)

    $default	reduce using rule 5 (primary_expression)



state 86

    mutiply_expression  ->  mutiply_expression MULTIPLY . power_expression   (rule 37)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    power_expression	go to state 104



state 87

    mutiply_expression  ->  mutiply_expression DIVIDE . power_expression   (rule 38)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    power_expression	go to state 105



state 88

    mutiply_expression  ->  mutiply_expression MOD . power_expression   (rule 39)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    power_expression	go to state 106



state 89

    init_declarator  ->  ID ASSIGN . additive_expression   (rule 23)

    ID  	shift, and go to state 50
    DIGIT	shift, and go to state 16
    LP  	shift, and go to state 20

    primary_expression	go to state 52
    additive_expression	go to state 107
    mutiply_expression	go to state 54
    power_expression	go to state 55



state 90

    declaration  ->  Type_Specifier init_declarator_list SEMICOLON .   (rule 19)

    $default	reduce using rule 19 (declaration)



state 91

    init_declarator_list  ->  init_declarator_list COMIC . init_declarator   (rule 21)

    ID  	shift, and go to state 56

    init_declarator	go to state 108



state 92

    Logic_assign_expression  ->  primary_expression LP_Symbol primary_expression .   (rule 43)

    $default	reduce using rule 43 (Logic_assign_expression)



state 93

    logic_and_expression  ->  logic_and_expression AND login_not_expression .   (rule 45)

    $default	reduce using rule 45 (logic_and_expression)



state 94

    logic_and_expression  ->  logic_and_expression . AND login_not_expression   (rule 45)
    logic_or_expression  ->  logic_or_expression OR logic_and_expression .   (rule 47)

    AND 	shift, and go to state 69

    $default	reduce using rule 47 (logic_or_expression)



state 95

    iteration_statement  ->  WHILE LP expression RP . statement   (rule 52)

    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7

    primary_expression	go to state 23
    statement	go to state 109
    compound_statement	go to state 25
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 96

    iteration_statement  ->  FOR LP declaration expression_statement . RP statement   (rule 55)
    iteration_statement  ->  FOR LP declaration expression_statement . expression RP statement   (rule 56)

    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    RP  	shift, and go to state 110

    primary_expression	go to state 23
    expression	go to state 111
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35



state 97

    iteration_statement  ->  FOR LP expression_statement expression_statement . RP statement   (rule 53)
    iteration_statement  ->  FOR LP expression_statement expression_statement . expression RP statement   (rule 54)

    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    RP  	shift, and go to state 112

    primary_expression	go to state 23
    expression	go to state 113
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35



state 98

    selection_statement  ->  IF LP expression RP . statement   (rule 50)
    selection_statement  ->  IF LP expression RP . statement ELSE statement   (rule 51)

    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7

    primary_expression	go to state 23
    statement	go to state 114
    compound_statement	go to state 25
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 99

    input_Statement  ->  INPUT LP ID RP .   (rule 64)

    $default	reduce using rule 64 (input_Statement)



state 100

    write_Statement  ->  OUTPUT LP primary_expression RP . SEMICOLON   (rule 63)

    SEMICOLON	shift, and go to state 115



state 101

    power_expression  ->  primary_expression POW primary_expression .   (rule 40)

    $default	reduce using rule 40 (power_expression)



state 102

    additive_expression  ->  additive_expression PLUS mutiply_expression .   (rule 34)
    mutiply_expression  ->  mutiply_expression . MULTIPLY power_expression   (rule 37)
    mutiply_expression  ->  mutiply_expression . DIVIDE power_expression   (rule 38)
    mutiply_expression  ->  mutiply_expression . MOD power_expression   (rule 39)

    MULTIPLY	shift, and go to state 86
    DIVIDE	shift, and go to state 87
    MOD 	shift, and go to state 88

    $default	reduce using rule 34 (additive_expression)



state 103

    additive_expression  ->  additive_expression MINUS mutiply_expression .   (rule 35)
    mutiply_expression  ->  mutiply_expression . MULTIPLY power_expression   (rule 37)
    mutiply_expression  ->  mutiply_expression . DIVIDE power_expression   (rule 38)
    mutiply_expression  ->  mutiply_expression . MOD power_expression   (rule 39)

    MULTIPLY	shift, and go to state 86
    DIVIDE	shift, and go to state 87
    MOD 	shift, and go to state 88

    $default	reduce using rule 35 (additive_expression)



state 104

    mutiply_expression  ->  mutiply_expression MULTIPLY power_expression .   (rule 37)

    $default	reduce using rule 37 (mutiply_expression)



state 105

    mutiply_expression  ->  mutiply_expression DIVIDE power_expression .   (rule 38)

    $default	reduce using rule 38 (mutiply_expression)



state 106

    mutiply_expression  ->  mutiply_expression MOD power_expression .   (rule 39)

    $default	reduce using rule 39 (mutiply_expression)



state 107

    init_declarator  ->  ID ASSIGN additive_expression .   (rule 23)
    additive_expression  ->  additive_expression . PLUS mutiply_expression   (rule 34)
    additive_expression  ->  additive_expression . MINUS mutiply_expression   (rule 35)

    PLUS	shift, and go to state 83
    MINUS	shift, and go to state 84

    $default	reduce using rule 23 (init_declarator)



state 108

    init_declarator_list  ->  init_declarator_list COMIC init_declarator .   (rule 21)

    $default	reduce using rule 21 (init_declarator_list)



state 109

    iteration_statement  ->  WHILE LP expression RP statement .   (rule 52)

    $default	reduce using rule 52 (iteration_statement)



state 110

    iteration_statement  ->  FOR LP declaration expression_statement RP . statement   (rule 55)

    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7

    primary_expression	go to state 23
    statement	go to state 116
    compound_statement	go to state 25
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 111

    iteration_statement  ->  FOR LP declaration expression_statement expression . RP statement   (rule 56)

    RP  	shift, and go to state 117



state 112

    iteration_statement  ->  FOR LP expression_statement expression_statement RP . statement   (rule 53)

    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7

    primary_expression	go to state 23
    statement	go to state 118
    compound_statement	go to state 25
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 113

    iteration_statement  ->  FOR LP expression_statement expression_statement expression . RP statement   (rule 54)

    RP  	shift, and go to state 119



state 114

    selection_statement  ->  IF LP expression RP statement .   (rule 50)
    selection_statement  ->  IF LP expression RP statement . ELSE statement   (rule 51)

    ELSE	shift, and go to state 120

    $default	reduce using rule 50 (selection_statement)



state 115

    write_Statement  ->  OUTPUT LP primary_expression RP SEMICOLON .   (rule 63)

    $default	reduce using rule 63 (write_Statement)



state 116

    iteration_statement  ->  FOR LP declaration expression_statement RP statement .   (rule 55)

    $default	reduce using rule 55 (iteration_statement)



state 117

    iteration_statement  ->  FOR LP declaration expression_statement expression RP . statement   (rule 56)

    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7

    primary_expression	go to state 23
    statement	go to state 121
    compound_statement	go to state 25
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 118

    iteration_statement  ->  FOR LP expression_statement expression_statement RP statement .   (rule 53)

    $default	reduce using rule 53 (iteration_statement)



state 119

    iteration_statement  ->  FOR LP expression_statement expression_statement expression RP . statement   (rule 54)

    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7

    primary_expression	go to state 23
    statement	go to state 122
    compound_statement	go to state 25
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 120

    selection_statement  ->  IF LP expression RP statement ELSE . statement   (rule 51)

    WHILE	shift, and go to state 9
    FOR 	shift, and go to state 10
    IF  	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    INPUT	shift, and go to state 13
    OUTPUT	shift, and go to state 14
    ID  	shift, and go to state 15
    DIGIT	shift, and go to state 16
    PLUS	shift, and go to state 17
    MINUS	shift, and go to state 18
    NOT 	shift, and go to state 19
    LP  	shift, and go to state 20
    LBRACE	shift, and go to state 7

    primary_expression	go to state 23
    statement	go to state 123
    compound_statement	go to state 25
    expression_statement	go to state 29
    expression	go to state 30
    self_operate_expression	go to state 31
    Logic_assign_expression	go to state 32
    logic_and_expression	go to state 33
    logic_or_expression	go to state 34
    login_not_expression	go to state 35
    selection_statement	go to state 36
    iteration_statement	go to state 37
    write_Statement	go to state 38
    input_Statement	go to state 39



state 121

    iteration_statement  ->  FOR LP declaration expression_statement expression RP statement .   (rule 56)

    $default	reduce using rule 56 (iteration_statement)



state 122

    iteration_statement  ->  FOR LP expression_statement expression_statement expression RP statement .   (rule 54)

    $default	reduce using rule 54 (iteration_statement)



state 123

    selection_statement  ->  IF LP expression RP statement ELSE statement .   (rule 51)

    $default	reduce using rule 51 (selection_statement)



state 124

    $   	go to state 125



state 125

    $   	go to state 126



state 126

    $default	accept
